@page "{id:int}"
@model TattooStudio.WebUI.Pages.Admin.Requests.DetailsModel
@using TattooStudio.Core.Entities
@using TattooStudio.Core.Enums
@using TattooStudio.WebUI.Helpers
@Html.AntiForgeryToken()
@{
    ViewData["Title"] = "Detalhes da Solicitação";
}

@if (Model.TattooRequest != null)
{
    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
        <h1 class="h3 mb-0 text-gray-800">@ViewData["Title"]</h1>
        <div>
            @if (Model.TattooRequest.Status == RequestStatus.ListaDeEspera)
            {
                <form method="post" asp-page-handler="ConvertToRequest" asp-route-id="@Model.TattooRequest.Id" class="d-inline">
                    <button type="submit" class="btn btn-success btn-icon-split">
                        <span class="icon text-white-50"><i class="bi bi-check-circle-fill"></i></span>
                        <span class="text">Converter em Solicitação</span>
                    </button>
                </form>
            }
            else if (Model.TattooRequest.Status == RequestStatus.NovaSolicitacao)
            {
                <form method="post" asp-page-handler="MarkAsAnalyzing" asp-route-requestId="@Model.TattooRequest.Id" class="d-inline">
                    <button type="submit" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50"><i class="bi bi-eye"></i></span>
                        <span class="text">Marcar como "Em Análise"</span>
                    </button>
                </form>
            }

            @if (!Model.HasExistingAppointment && (Model.TattooRequest.Status == RequestStatus.AguardandoSinal || Model.TattooRequest.Status == RequestStatus.OrcamentoEnviado))
            {
                <button id="scheduleButton" class="btn btn-success btn-icon-split">
                    <span class="icon text-white-50"><i class="bi bi-calendar-check"></i></span>
                    <span class="text">Agendar Sessão</span>
                </button>
            }

            @if (Model.HasExistingAppointment)
            {
                <a href="/Admin/Calendar" class="btn btn-info btn-icon-split">
                    <span class="icon text-white-50"><i class="bi bi-calendar-alt"></i></span>
                    <span class="text">Ver no Calendário</span>
                </a>
            }
            <a asp-page="./Index" class="btn btn-secondary">Voltar ao Quadro</a>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Solicitação de @Model.TattooRequest.User?.FullName</h6>
            <span class="badge p-2 text-white" style="font-size: 1rem; background-color: @(EnumHelpers.GetStatusColor(Model.TattooRequest.Status));">
                @EnumHelpers.GetDisplayName(Model.TattooRequest.Status)
            </span>
        </div>
        <div class="card-body">
            <ul class="nav nav-tabs" id="requestDetailsTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="answers-tab" data-bs-toggle="tab" data-bs-target="#answers-tab-pane" type="button" role="tab" aria-controls="answers-tab-pane" aria-selected="true">Perguntas e Respostas</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="images-tab" data-bs-toggle="tab" data-bs-target="#images-tab-pane" type="button" role="tab" aria-controls="images-tab-pane" aria-selected="false">Imagens de Referência</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="client-info-tab" data-bs-toggle="tab" data-bs-target="#client-info-tab-pane" type="button" role="tab" aria-controls="client-info-tab-pane" aria-selected="false">Detalhes do Cliente</button>
                </li>
                @if (Model.TattooRequest.Status == RequestStatus.EmAnalise)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="analysis-tab" data-bs-toggle="tab" data-bs-target="#analysis-tab-pane" type="button" role="tab" aria-controls="analysis-tab-pane" aria-selected="false">Análise Interna</button>
                    </li>
                }
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="quote-tab" data-bs-toggle="tab" data-bs-target="#quote-tab-pane" type="button" role="tab" aria-controls="quote-tab-pane" aria-selected="false">Orçamento</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat-tab-pane" type="button" role="tab" aria-controls="chat-tab-pane" aria-selected="false">Chat</button>
                </li>
            </ul>
            <div class="tab-content border border-top-0 p-3" id="requestDetailsTabContent">
                <div class="tab-pane fade show active" id="answers-tab-pane" role="tabpanel" aria-labelledby="answers-tab" tabindex="0">
                    <dl class="row mt-3">
                        @foreach (var answer in Model.TextAnswers)
                        {
                            <dt class="col-sm-4 col-lg-3">@answer.FormField?.Label</dt>
                            <dd class="col-sm-8 col-lg-9 mb-3">
                                <span class="text-break">@answer.Value</span>
                            </dd>
                        }
                    </dl>
                </div>
                <div class="tab-pane fade" id="images-tab-pane" role="tabpanel" aria-labelledby="images-tab" tabindex="0">
                    <div class="row g-3 mt-2">
                        @if (!Model.ImageAnswers.Any())
                        {
                            <div class="col-12">
                                <p class="text-center text-muted mt-3">Nenhuma imagem de referência foi enviada.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var answer in Model.ImageAnswers)
                            {
                                <div class="col-md-4 col-lg-3">
                                    <div class="card">
                                        <a href="~/@answer.Value" data-bs-toggle="tooltip" title="Clique para ampliar" target="_blank">
                                            <img src="~/@answer.Value" class="card-img-top" style="height: 200px; object-fit: cover;" alt="Imagem de Referência" />
                                        </a>
                                        <div class="card-body p-2">
                                            <p class="card-text small text-muted">@answer.FormField?.Label</p>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="tab-pane fade" id="client-info-tab-pane" role="tabpanel" aria-labelledby="client-info-tab" tabindex="0">
                    <dl class="row mt-3">
                        <dt class="col-sm-4 col-lg-3">Nome do Cliente</dt>
                        <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.User?.FullName</dd>
                        @if (Model.TattooRequest.EstimatedSize.HasValue && Model.TattooRequest.EstimatedSize > 0)
                        {
                            <dt class="col-sm-4 col-lg-3">Tamanho Informado</dt>
                            <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.EstimatedSize cm</dd>
                        }
                        @if (Model.TattooRequest.InitialEstimate.HasValue && Model.TattooRequest.InitialEstimate > 0)
                        {
                            <dt class="col-sm-4 col-lg-3">Estimativa Inicial</dt>
                            <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.InitialEstimate.Value.ToString("C")</dd>
                        }
                        <dt class="col-sm-4 col-lg-3">E-mail</dt>
                        <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.User?.Email</dd>
                        <dt class="col-sm-4 col-lg-3">WhatsApp</dt>
                        <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.User?.PhoneNumber</dd>
                        @if (!string.IsNullOrEmpty(Model.TattooRequest.User?.InstagramHandle))
                        {
                            <dt class="col-sm-4 col-lg-3">Instagram</dt>
                            <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.User.InstagramHandle</dd>
                        }
                        <dt class="col-sm-4 col-lg-3">Data da Solicitação</dt>
                        <dd class="col-sm-8 col-lg-9">@Model.TattooRequest.SubmissionDate.ToString("dd/MM/yyyy 'às' HH:mm")</dd>
                    </dl>
                </div>
                @if (Model.TattooRequest.Status == RequestStatus.EmAnalise)
                {
                    <div class="tab-pane fade" id="analysis-tab-pane" role="tabpanel" aria-labelledby="analysis-tab" tabindex="0">
                        <form method="post" asp-page-handler="SaveNotes" asp-route-id="@Model.TattooRequest.Id" class="mt-3">
                            <h5 class="mb-3">Anotações da Análise (visível apenas para você)</h5>
                            <div class="mb-3">
                                <textarea asp-for="AnalysisNotes" class="form-control" rows="8" placeholder="Adicione suas anotações sobre a viabilidade, complexidade, ideias de design, etc."></textarea>
                            </div>
                            <button type="submit" class="btn btn-success">Salvar Anotações</button>
                        </form>
                    </div>
                }
                <div class="tab-pane fade" id="quote-tab-pane" role="tabpanel" aria-labelledby="quote-tab" tabindex="0">
                    @if (Model.TattooRequest.Quotes.Any())
                    {
                        var quote = Model.TattooRequest.Quotes.OrderByDescending(q => q.CreatedAt).First();
                        <dl class="row mt-3">
                            <dt class="col-sm-5">Valor Total</dt>
                            <dd class="col-sm-7">@quote.Amount.ToString("C")</dd>
                            <dt class="col-sm-5">Valor do Sinal</dt>
                            <dd class="col-sm-7">@quote.DepositAmount.ToString("C")</dd>
                            <dt class="col-sm-5">Válido até</dt>
                            <dd class="col-sm-7">@quote.ExpiryDate.ToString("dd/MM/yyyy")</dd>
                            <dt class="col-sm-5">Status</dt>
                            <dd class="col-sm-7"><span class="badge bg-warning">@quote.Status</span></dd>
                            @if (!string.IsNullOrEmpty(quote.Description))
                            {
                                <dt class="col-sm-12 mt-2">Descrição</dt>
                                <dd class="col-sm-12">@quote.Description</dd>
                            }
                        </dl>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="CreateQuote" asp-route-requestId="@Model.TattooRequest.Id" class="mt-3">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label asp-for="NewQuote.Amount" class="form-label"></label>
                                    <input asp-for="NewQuote.Amount" class="form-control" />
                                    <span asp-validation-for="NewQuote.Amount" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="NewQuote.DepositAmount" class="form-label"></label>
                                    <input asp-for="NewQuote.DepositAmount" class="form-control" />
                                    <span asp-validation-for="NewQuote.DepositAmount" class="text-danger"></span>
                                </div>
                                <div class="col-md-12">
                                    <label asp-for="NewQuote.Description" class="form-label"></label>
                                    <textarea asp-for="NewQuote.Description" class="form-control" rows="3"></textarea>
                                </div>
                                <div class="col-md-12">
                                    <label asp-for="NewQuote.ExpiryDate" class="form-label"></label>
                                    <input asp-for="NewQuote.ExpiryDate" type="date" class="form-control" />
                                    <span asp-validation-for="NewQuote.ExpiryDate" class="text-danger"></span>
                                </div>
                                <div class="col-12 d-grid">
                                    <button type="submit" class="btn btn-success" disabled="@(Model.TattooRequest.Status != RequestStatus.EmAnalise)">
                                        Criar e Enviar Orçamento
                                    </button>
                                    @if (Model.TattooRequest.Status != RequestStatus.EmAnalise)
                                    {
                                        <small class="form-text text-muted text-center mt-2">
                                            O orçamento só pode ser criado quando a solicitação está "Em Análise".
                                        </small>
                                    }
                                </div>
                            </div>
                        </form>
                    }
                </div>
                <div class="tab-pane fade" id="chat-tab-pane" role="tabpanel" aria-labelledby="chat-tab" tabindex="0">
                    <div class="row mt-3">
                        <div class="col-12">
                            <h4 class="mb-3">Histórico de Conversa</h4>
                            <div id="chat-history-container" class="chat-history mb-4 p-3 border rounded" style="max-height: 400px; overflow-y: auto;">
                                @foreach (var message in Model.TattooRequest.ChatMessages.OrderBy(m => m.SentAt))
                                {
                                    var alignment = message.Sender == "Admin" ? "d-flex justify-content-end" : "d-flex justify-content-start";
                                    <div class="mb-3 @alignment">
                                        <div class="p-3 rounded" style="max-width: 70%; @(message.Sender == "Admin" ? "background-color: #cfe2ff;" : "background-color: #f8f9fa;")">
                                            <p class="mb-1">@message.Message</p>
                                            <small class="text-muted d-block text-end">@message.SentAt.ToString("dd/MM/yy HH:mm")</small>
                                        </div>
                                    </div>
                                }
                            </div>
                            <hr />
                            <h5 class="mt-4">Enviar Nova Mensagem</h5>
                            <div>
                                <div class="mb-3">
                                    <textarea id="newMessageText" class="form-control" rows="4" placeholder="Digite sua mensagem aqui..."></textarea>
                                </div>
                                <button id="sendMessageBtn" type="button" class="btn btn-primary">Enviar Mensagem</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <form id="scheduleForm" method="post" asp-page-handler="Schedule">
        <input type="hidden" name="tattooRequestId" value="@Model.TattooRequest.Id" />
        <input type="hidden" id="scheduleStart" name="scheduleStart" />
        <input type="hidden" id="durationHours" name="durationHours" />
    </form>
}
else
{
    <div class="alert alert-warning">Solicitação não encontrada.</div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initializeScheduling();
            initializeChat();
        });

        function initializeScheduling() {
            const scheduleButton = document.getElementById('scheduleButton');
            if (!scheduleButton) return;

            scheduleButton.addEventListener('click', function () {
                Swal.fire({
                    title: 'Agendar Nova Sessão',
                    html: `
                        <div class="form-group text-left mb-3">
                            <label for="swal-schedule-start" class="mb-1">Data e Hora de Início</label>
                            <input id="swal-schedule-start" type="datetime-local" class="form-control">
                        </div>
                        <div class="form-group text-left">
                            <label for="swal-duration" class="mb-1">Duração Estimada (em horas)</label>
                            <input id="swal-duration" type="number" value="2" min="1" class="form-control">
                        </div>`,
                    confirmButtonText: 'Confirmar Agendamento',
                    confirmButtonColor: '#198754',
                    focusConfirm: false,
                    showCancelButton: true,
                    cancelButtonText: 'Cancelar',
                    preConfirm: () => {
                        const start = document.getElementById('swal-schedule-start').value;
                        const duration = document.getElementById('swal-duration').value;
                        if (!start) {
                            Swal.showValidationMessage('Por favor, informe a data e hora de início.');
                            return false;
                        }
                        return { start: start, duration: duration };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        document.getElementById('scheduleStart').value = result.value.start;
                        document.getElementById('durationHours').value = result.value.duration;
                        document.getElementById('scheduleForm').submit();
                    }
                });
            });
        }

        function initializeChat() {
            const sendMessageBtn = document.getElementById('sendMessageBtn');
            if (!sendMessageBtn) return;

            const newMessageText = document.getElementById('newMessageText');
            const chatHistoryContainer = document.getElementById('chat-history-container');
            const requestId = @(Model.TattooRequest?.Id ?? 0);

            sendMessageBtn.addEventListener('click', function () {
                const messageContent = newMessageText.value;
                if (!messageContent.trim()) {
                    toastr.warning('A mensagem não pode estar vazia.');
                    return;
                }

                const data = { message: messageContent };

                fetch(`?handler=SendMessage&requestId=${requestId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                .then(response => {
                    if (!response.ok) { throw new Error('Falha na resposta da rede.'); }
                    return response.json();
                })
                .then(result => {
                    appendMessageToHistory(result);
                    newMessageText.value = '';
                    toastr.success('Mensagem enviada com sucesso!');
                })
                .catch(error => toastr.error('Ocorreu um erro ao enviar a mensagem.'));
            });

            function appendMessageToHistory(msgData) {
                const messageWrapper = document.createElement('div');
                messageWrapper.className = 'mb-3 d-flex justify-content-end';

                const messageBubble = document.createElement('div');
                messageBubble.className = 'p-3 rounded';
                messageBubble.style.maxWidth = '70%';
                messageBubble.style.backgroundColor = '#cfe2ff';

                const messageText = document.createElement('p');
                messageText.className = 'mb-1';
                messageText.textContent = msgData.message;

                const messageTime = document.createElement('small');
                messageTime.className = 'text-muted d-block text-end';
                messageTime.textContent = msgData.sentAt;

                messageBubble.appendChild(messageText);
                messageBubble.appendChild(messageTime);
                messageWrapper.appendChild(messageBubble);

                chatHistoryContainer.appendChild(messageWrapper);
                chatHistoryContainer.scrollTop = chatHistoryContainer.scrollHeight;
            }
        }
    </script>
}