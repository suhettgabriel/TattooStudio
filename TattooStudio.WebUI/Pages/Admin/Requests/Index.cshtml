@page
@model TattooStudio.WebUI.Pages.Admin.Requests.IndexModel
@using TattooStudio.Core.Enums
@using TattooStudio.WebUI.Helpers
@Html.AntiForgeryToken()
@{
    ViewData["Title"] = "Gestão de Solicitações";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>@ViewData["Title"]</h1>
</div>

<form method="get" class="mb-4 p-3 border rounded">
    <div class="row g-3 align-items-end">
        <div class="col-12 col-md-6 col-lg">
            <label asp-for="SearchTerm" class="form-label">Nome ou E-mail</label>
            <input asp-for="SearchTerm" type="search" class="form-control" />
        </div>
        <div class="col-12 col-md-6 col-lg">
            <label asp-for="StudioId" class="form-label">Filtrar por Estúdio</label>
            <select asp-for="StudioId" asp-items="Model.StudioOptions" class="form-select">
                <option value="">Todos</option>
            </select>
        </div>
        <div class="col-12 col-md-6 col-lg">
            <label asp-for="StartDate" class="form-label"></label>
            <input asp-for="StartDate" class="form-control" />
        </div>
        <div class="col-12 col-md-6 col-lg">
            <label asp-for="EndDate" class="form-label"></label>
            <input asp-for="EndDate" class="form-control" />
        </div>
        <div class="col-12 col-md-6 col-lg">
            <label class="form-label">Exibir Colunas</label>
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle w-100 text-truncate" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-view-list"></i> <span class="d-none d-md-inline">Selecionar Status</span>
                </button>
                <ul class="dropdown-menu p-2" style="min-width: 250px;">
                    @foreach (var status in Model.StatusColumns)
                    {
                        var isChecked = Model.SelectedStatuses?.Contains(status) ?? false;
                        <li>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="SelectedStatuses" value="@status" id="status-@status" checked="@isChecked">
                                <label class="form-check-label" for="status-@status">
                                    @EnumHelpers.GetDisplayName(status)
                                </label>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="col-12 col-md-auto d-grid">
            <button type="submit" class="btn btn-primary">Filtrar</button>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-12 text-sm-end">
            <a asp-page="./Index" class="btn btn-sm btn-outline-secondary">Limpar Filtros</a>
        </div>
    </div>
</form>

<div class="kanban-board-container">
    <div class="kanban-board">
        @foreach (var status in Model.RequestsByStatus.Keys)
        {
            var requestsInColumn = Model.RequestsByStatus[status];
            <div class="kanban-column">
                <h5 class="kanban-column-title">@EnumHelpers.GetDisplayName(status) (@requestsInColumn.Count)</h5>
                <div class="kanban-dropzone" data-status="@status">
                    @foreach (var request in requestsInColumn)
                    {
                        <div class="kanban-card" data-id="@request.Id" style="border-left-color: @EnumHelpers.GetStatusColor(request.Status)">
                            <div class="card-body">
                                <p class="card-title fw-bold">@request.User?.FullName</p>
                                <p class="card-subtitle mb-2 text-muted">@request.SubmissionDate.ToString("dd/MM/yyyy 'às' HH:mm")</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <a asp-page="./Details" asp-route-id="@request.Id" class="btn btn-sm btn-details-custom">Ver Detalhes</a>
                                    @if (status == RequestStatus.Recusado)
                                    {
                                        <form method="post" asp-page-handler="DeleteRequest" asp-route-id="@request.Id" class="d-inline delete-form">
                                            <button type="submit" class="btn btn-sm btn-danger" title="Excluir Solicitação">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .kanban-board-container {
            overflow-x: auto;
            padding-bottom: 1rem;
        }

        .kanban-board {
            display: flex;
            gap: 1rem;
            min-width: fit-content;
        }

        .kanban-column {
            flex: 1 0 300px;
            max-width: 350px;
            background-color: #f8f9fa;
            border-radius: 0.5rem;
            padding: 0.5rem;
        }

        .kanban-column-title {
            padding: 0.5rem;
            font-weight: 600;
        }

        .kanban-dropzone {
            min-height: 200px;
            padding: 0.5rem;
            border-radius: 0.25rem;
        }

        .kanban-card {
            background-color: white;
            border: 1px solid #dee2e6;
            border-left-width: 5px;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: move;
        }

            .kanban-card:last-child {
                margin-bottom: 0;
            }

        .sortable-ghost {
            opacity: 0.4;
            background-color: #6c757d;
        }

        .btn-details-custom {
            background-color: #343a40;
            color: #ffffff;
            border-color: #343a40;
        }

            .btn-details-custom:hover, .btn-details-custom:focus {
                background-color: #495057;
                color: #ffffff;
                border-color: #495057;
            }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initializeKanban();
            initializeDeleteForms();
        });

        function initializeKanban() {
            const dropzones = document.querySelectorAll('.kanban-dropzone');
            dropzones.forEach(zone => {
                new Sortable(zone, {
                    group: 'kanban',
                    animation: 150,
                    ghostClass: 'sortable-ghost',
                    onAdd: function (evt) {
                        const card = evt.item;
                        const requestId = card.getAttribute('data-id');
                        const newStatus = evt.to.getAttribute('data-status');
                        updateRequestStatus(requestId, newStatus, card, evt.from);
                    }
                });
            });
        }

        function updateRequestStatus(requestId, newStatus, cardElement, originalColumn) {
            const data = {
                requestId: parseInt(requestId),
                newStatus: newStatus
            };

            fetch('?handler=UpdateStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (response.ok) {
                    toastr.success(`Status alterado para "${newStatus.replace(/([A-Z])/g, ' $1').trim()}"!`);
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    toastr.error('Não foi possível mover o card. A página será recarregada.');
                    originalColumn.appendChild(cardElement);
                    setTimeout(() => window.location.reload(), 1500);
                }
            })
            .catch(error => {
                toastr.error('Erro de conexão. A página será recarregada.');
                originalColumn.appendChild(cardElement);
                setTimeout(() => window.location.reload(), 1500);
            });
        }

        function initializeDeleteForms() {
             const deleteForms = document.querySelectorAll('.delete-form');
             deleteForms.forEach(form => {
                 form.addEventListener('submit', function (event) {
                     event.preventDefault();
                     Swal.fire({
                         title: 'Você tem certeza?',
                         text: "Esta ação não pode ser revertida!",
                         icon: 'warning',
                         showCancelButton: true,
                         confirmButtonColor: '#d33',
                         cancelButtonColor: '#6c757d',
                         confirmButtonText: 'Sim, excluir!',
                         cancelButtonText: 'Cancelar'
                     }).then((result) => {
                         if (result.isConfirmed) {
                             form.submit();
                         }
                     });
                 });
             });
        }
    </script>
}