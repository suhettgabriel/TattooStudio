@page
@model TattooStudio.WebUI.Pages.Admin.FormFields.IndexModel
@using TattooStudio.WebUI.Helpers
@Html.AntiForgeryToken()
@{
    ViewData["Title"] = "Gerenciar Campos do Formulário";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>@ViewData["Title"]</h1>
    <a asp-page="Create" class="btn btn-success">
        <i class="bi bi-plus-circle"></i> Novo Campo
    </a>
</div>
<p class="text-muted">Arraste e solte as linhas para reordenar os campos do formulário.</p>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th style="width: 50px;"></th>
                <th>Ordem</th>
                <th>Pergunta (Label)</th>
                <th>Tipo</th>
                <th>Obrigatório</th>
                <th class="text-end">Ações</th>
            </tr>
        </thead>
        <tbody id="sortable-table">
            @for (int i = 0; i < Model.FormFields.Count; i++)
            {
                var item = Model.FormFields[i];
                <tr data-id="@item.Id">
                    <td class="text-center" style="cursor: move;"><i class="bi bi-grip-vertical"></i></td>
                    <td>@(i + 1)</td>
                    <td>@Html.DisplayFor(modelItem => item.Label)</td>
                    <td>@item.FieldType.GetDisplayName()</td>
                    <td>@(item.IsRequired ? "Sim" : "Não")</td>
                    <td class="text-end">
                        <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Editar</a>
                        <form method="post" asp-page-handler="Delete" asp-route-id="@item.Id" class="d-inline delete-form">
                            <button type="submit" class="btn btn-sm btn-outline-danger">Excluir</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sortableTable = document.getElementById('sortable-table');
            if (sortableTable) {
                new Sortable(sortableTable, {
                    animation: 150,
                    handle: 'td:first-child',
                    onEnd: function (evt) {
                        const items = Array.from(sortableTable.children);
                        const orderedIds = items.map(item => parseInt(item.getAttribute('data-id')));

                        fetch('?handler=Reorder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify(orderedIds)
                        }).then(response => {
                            if (response.ok) {
                                toastr.success('Ordem salva com sucesso!');
                                setTimeout(() => window.location.reload(), 1000);
                            } else {
                                toastr.error('Falha ao salvar a nova ordem.');
                            }
                        }).catch(() => {
                            toastr.error('Erro de conexão ao salvar a ordem.');
                        });
                    }
                });
            }

            const deleteForms = document.querySelectorAll('.delete-form');
            deleteForms.forEach(form => {
                form.addEventListener('submit', function (event) {
                    event.preventDefault();

                    Swal.fire({
                        title: 'Você tem certeza?',
                        text: "Esta ação não pode ser revertida!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Sim, excluir!',
                        cancelButtonText: 'Cancelar'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            form.submit();
                        }
                    });
                });
            });
        });
    </script>
}